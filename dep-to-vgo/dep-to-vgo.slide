dep to vgo

22 March 2018

Eno Compton
Developer Advocate, Google
enocom@google.com
@enocom_

* The biggest problem with Go

Go does not have an official dependency management tool.

* What is dep?

"dep is a prototype dependency management tool for Go."

"dep is the official experiment, but not yet the official tool."

[[https://github.com/golang/dep][https://github.com/golang/dep]]

* February 20, 2018

Russ Cox, tech lead of the Go team:

"We need to add package versioning to Go."

* Seven part series

- Go += Package Versioning

- A Tour of Versioned Go (vgo)

- Semantic Import Versioning

- Minimal Version Selection

- Reproducible, Verifiable, Verified Builds

- Defining Go Modules

- Versioned Go Commands

[[https://research.swtch.com/vgo][Go & Versioning]]

* vgo == versioned go

* What is vgo?

Russ Cox:

This proposal keeps the best parts of go get, adds reproducible builds, adopts
semantic versioning, eliminates vendoring, deprecates GOPATH in favor of a
project-based workflow, and provides a smooth migration path from dep and its
predecessors.

[[https://research.swtch.com/vgo-intro][Go += Package Versioning]]

* Note

- vgo is just a temporary name
- eventually its functionality will merge into go

* Now a official Go proposal

[[https://golang.org/issue/24301][https://golang.org/issue/24301]]

* What about dep?

Sam Boyer:

At the heart of our disagreement is whether the expressiveness reductions vgo
must impose in order to make its core algorithm work will yield an environment
that is bearable for Go developers.

[[https://sdboyer.io/blog/vgo-and-dep][Thoughts on vgo and dep]]

* Some concerns

Sam Boyer:

vgo, as currently conceived, is a near-complete departure from dep. It was
created largely in isolation from the community’s work on dep, to the point
where not only is there no shared code and at best moderate conceptual overlap,
but a considerable amount of the insight and experience gleaned from dep as the
“official experiment” is just discarded.

[[https://sdboyer.io/blog/vgo-and-dep][Thoughts on vgo and dep]]

* JBD (aka rakyll) on dependency management

.image jbd-on-vgo.png

* What's the future of dep?

* Let's talk about vgo

- No more required GOPATH
- Projects now require a go.mod file (but no lock file)
- Semantic versioning of dependencies
- No more vendoring
- Project-based workflow

* Sample go.mod

  module "my/thing"

  require "foo" v1.0.2
  require "bar" v0.0.0-20180312154400-d284fd84214e
  exclude "old/thing" v1.2.3
  replace "bad/thing" v1.4.5 => "../good/thing"

* Project structure

One binary structure:

    go.mod
    main.go
    foo/foo.go
    bar/bar.go

Library:

    go.mod
    lib.go

Multi-binary structure:

    cmd/cli/go.mod
    cmd/cli/main.go
    cmd/web/go.mod
    cmd/web/main.go
    foo/go.mod
    foo/foo.go

* The plan for Go modules

- 1.11: preliminary support
- 1.12: official support
- Later release: remove old, unversioned go get

* Trying out vgo

Russ Cox:

Even so, I'm sure there are details that are wrong. I hope our users will help
us get this design right by trying the new vgo prototype and engaging in
productive discussions.

[[https://research.swtch.com/vgo-intro][vgo-intro]]

* Dave Chaney: go.mod should have a different name

[[https://github.com/golang/go/issues/23972][https://github.com/golang/go/issues/23972]]

* Let's try it
